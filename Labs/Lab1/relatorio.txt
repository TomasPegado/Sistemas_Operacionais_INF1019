Nome: Tomás Lenzi
Matrícula: 2220711

Questão 1) Faça um programa para criar dois processos, o pai escreve seu pid e espera o
filho terminar e o filho escreve o seu pid e termina.

        Código fonte:

        #include  <stdio.h>
        #include  <string.h>
        #include  <sys/types.h>
        #include  <sys/wait.h>
        #include <unistd.h>

        int main(void){

        int pidfilho;
        int status;

        pidfilho = fork();

        if( pidfilho != 0 ){

        printf("\n pid do pai %d \n", getpid());

        waitpid(-1, &status, 0);

        }
        else {
        printf("\n pid do filho %d \n", getpid());

        }
        return 0;
        }

        Linha de Comando p/ compilação e execução do programa:

        gcc -Wall -o ex1 ex1.c
        ./ex1

        Saída gerada:

        pid do pai 6937 

        pid do filho 6938 

        Relatório:

        O código cria um processo pai e um filho. Em seguida, temos o processo pai exibindo seu pid e chamando o waitpid
        para o processo filho poder exibir o seu pid. Após isso, o programa finaliza.

Questão 2) Agora, usando a mesma estrutura de processos pai e filho, declare uma
variável visível ao pai e ao filho, no pai inicialize a variável com1 e imprima seu
valor antes do fork(). No filho, altere o valor da variável para 5 e imprima o seu
valor antes do exit(). Agora, no pai, imprima novamente o valor da variável após o
filho ter alterado a variável - após a waitpid(). Justifique os resultados obtidos.

        Código fonte:

        #include  <stdio.h>
        #include  <string.h>
        #include  <sys/types.h>
        #include  <sys/wait.h>
        #include <unistd.h>

        int main(void){

            // variaveis
            int var;
            int filho;
            int status;
            

            var = 1;
            printf("\n Processo pai iniciado \n");
            printf("\n pid do pai %d \n", getpid());
            printf("\n Variável = %d \n", var);
            filho = fork();


            if( filho != 0 ){
                
                waitpid(-1, &status, 0);
                printf("\n Variável = %d \n",var);
                printf("\n Processo do pai finalizado \n");
            }
            else {
                printf("\n Processo filho iniciado \n");
                var = 5;
                printf("\n Variável = %d \n",var);
                printf("\n Processo do filho finalizado \n");
            }
            return 0;
        }

        Linha de Comando p/ compilação e execução do programa:

                gcc -Wall -o ex2 ex2.c
                ./ex2

        Saída gerada:

        Processo pai iniciado 

        pid do pai 7350 

        Variável = 1 

        Processo filho iniciado 

        Variável = 5 

        Processo do filho finalizado 

        Variável = 1 

        Relatório:
        A variável var é iniciada com 1 antes do fork e o processo pai exibe ela na saída.
        Em seguida, temos a criação do processo filho que por sua vez recebe o valor da variável como 1,
        mas o altera para 5 e exibe-o na tela. Ao voltar para o processo pai, temos a exibição final do valor da variável como 1 e,
        isso ocorre, pois os dois processos não possuem memória compartilhada e alteração do valor no processo filho não é "vista" no processo pai.


Questão 3) Use o programa anterior para ler e ordenar um vetor de 10 posições. O filho
ordena o vetor e o pai exibe os dados do vetor antes do fork() e depois do
waitpid(). Eles usarão o mesmo vetor na memória? Justifique.

Código fonte:

// Função de comparação
int compare(const void *a, const void *b) {
    return (*(int*)a - *(int*)b);
}

int main(void)
{

	// variaveis
    int filho;
	int status;
	int vetor[10] = {1, 4, 3, 5, 2, 8, 0, 7, 9};

	filho = fork();
	

	if (filho != 0)
	{
		printf("\n Processo pai iniciado \n");
		printf("\n pid do pai %d \n", getpid());
		for (int i = 0; i < 10; i++)
		{
			printf("\n Posicao %d = %d \n", i, vetor[i]);
		}
		waitpid(-1, &status, 0);
		for (int i = 0; i < 10; i++)
		{
			printf("\n Posicao %d = %d \n", i, vetor[i]);
		}
		printf("\n Processo do pai finalizado \n");
	}
	else
	{
		printf("\n Processo filho iniciado \n");
		qsort(vetor, 10, sizeof(int), compare);
		for (int i = 0; i < 10; i++)
		{
			printf("%d \n", vetor[i]);
		}

		printf("\n Processo do filho finalizado \n");
	}
	return 0;
}

Linha de Comando p/ compilação e execução do programa:

    gcc -Wall -o ex3 ex3.c
    ./ex3

Saída gerada:

Processo pai iniciado 

 pid do pai 7972 

 Posicao 0 = 1 

 Posicao 1 = 4 

 Posicao 2 = 3 

 Posicao 3 = 5 

 Posicao 4 = 2 

 Posicao 5 = 8 

 Posicao 6 = 0 

 Posicao 7 = 7 

 Posicao 8 = 9 

 Posicao 9 = 0 

 Processo filho iniciado 
0 
0 
1 
2 
3 
4 
5 
7 
8 
9 

 Processo do filho finalizado 

 Posicao 0 = 1 

 Posicao 1 = 4 

 Posicao 2 = 3 

 Posicao 3 = 5 

 Posicao 4 = 2 

 Posicao 5 = 8 

 Posicao 6 = 0 

 Posicao 7 = 7 

 Posicao 8 = 9 

 Posicao 9 = 0 

 Processo do pai finalizado 

 Relatório:

 Como visto no código o processo filho ordena o vetor que é uma cópia do vetor do processo pai.
 Portanto, por não ser o mesmo vetor em memória, o processo filho ordena ele, mas depois que retorna ao processo pai
 o vetor "original" não foi ordenado e a exibição antes do fork() e depois do waitpid ficam iguais.


Questão 4.1 ) 
Modifique o programa anterior para que o filho execute um programa elaborado
por você, que mande imprimir uma mensagem qualquer no vídeo, por exemplo,
“alo mundo”

Código fonte:

    aloMundo.c:

        #include <stdlib.h>
        #include <stdio.h>


        int main(void){

            printf("\n Alo Mundo \n");
            return 0;
        }

    ex4.c:

        #include <stdio.h>
        #include <stdlib.h>
        #include <string.h>
        #include <sys/types.h>
        #include <sys/wait.h>
        #include <unistd.h>



        int main(void)
        {

            // variaveis
            int filho;
            int status;
            printf("\n Processo pai iniciado \n");
            printf("\n pid do pai %d \n", getpid());

            filho = fork();

            if (filho != 0)
            {

                waitpid(-1, &status, 0);
                
                printf("\n Processo do pai finalizado \n");
            }
            else
            {
                printf("\n Processo filho iniciado \n");
                execl("/home/tomas/Documentos/PUC/SO/Sistemas_Operacionais_INF1019/Labs/Lab1/aloMundo", "aloMundo");

                printf("\n Processo do filho finalizado \n");
            }
            return 0;
        }

Linha de Comando:

gcc -Wall -o aloMundo aloMundo.c
gcc -Wall -o ex4 ex4.c
./ex4

Saída gerada:

    Processo pai iniciado 

    pid do pai 8515 

    Processo filho iniciado 

    Alo Mundo 

    Processo do pai finalizado 


Questão 4.2) Em seguida altere o programa do item 4 para o filho executar o
programa echo da shell.

Código fonte:

    aloMundo.c:
        #include <stdlib.h>
        #include <stdio.h>


        int main(void){

            system("echo Hello Mundo");

            return 0;
        }
    
    ex4.c: Permaneceu o mesmo do item 4.1

Linha de Comando:

gcc -Wall -o aloMundo aloMundo.c
gcc -Wall -o ex4 ex4.c
./ex4

Saída gerada:

    Processo pai iniciado 

    pid do pai 4806 

    Processo filho iniciado 
    Hello Mundo

    Processo do pai finalizado 






Nome: Tomás Lenzi
Matrícula: 2220711

Questão 1)Faça um programa para somar matrizes de acordo
com o seguinte algoritmo:
    O primeiro processo irá criar duas matrizes
preenchidas e uma terceira vazia em 3 áreas de
memória compartilhada.
    Para cada linha da matriz solução, o seu
programa deverá gerar um processo para o seu
cálculo.

    Código Fonte:

    #include <stdio.h>
    #include <stdlib.h>
    #include <sys/ipc.h>
    #include <sys/shm.h>
    #include <sys/stat.h>
    #include <unistd.h>
    #include <sys/wait.h>

    #define SIZE 3 // Definindo uma matriz 3x3

    // Função para calcular a soma de uma linha
    void sum_row(int *A, int *B, int *C, int row) {
        int start = row * SIZE;
        for (int i = 0; i < SIZE; i++) {
            C[start + i] = A[start + i] + B[start + i];
        }
    }

    int main(void) {
        int shmid_A, shmid_B, shmid_C, status;
        int *A, *B, *C;

        // Alocação de memória compartilhada
        shmid_A = shmget(IPC_PRIVATE, SIZE*SIZE*sizeof(int), IPC_CREAT | IPC_EXCL | S_IRUSR | S_IWUSR);
        shmid_B = shmget(IPC_PRIVATE, SIZE*SIZE*sizeof(int), IPC_CREAT | IPC_EXCL | S_IRUSR | S_IWUSR);
        shmid_C = shmget(IPC_PRIVATE, SIZE*SIZE*sizeof(int), IPC_CREAT | IPC_EXCL | S_IRUSR | S_IWUSR);

        // Attachment de cada matriz na memória compartilhada
        A = (int *)shmat(shmid_A, NULL, 0);
        B = (int *)shmat(shmid_B, NULL, 0);
        C = (int *)shmat(shmid_C, NULL, 0);

        // Preenchendo as matrizes A e B
        for (int i = 0; i < SIZE*SIZE; i++) {
            A[i] = i + 1; // Exemplo de preenchimento
            B[i] = (i + 1) * 2; // Exemplo de preenchimento
        }

        // Criando processos filhos para calcular cada linha
        for (int i = 0; i < SIZE; i++) {

            if (fork() != 0){ // cria um processo filho para cada linha

                waitpid(-1, &status, 0); // espera cada processo filho terminar
            } else {
                sum_row(A, B, C, i);
                exit(0);
            }
        }


        // Imprimindo a matriz A
        printf("Matriz A:");
        for (int i = 0; i < SIZE*SIZE; i++) {
            if (i % SIZE == 0) printf("\n");
            printf("%d\t", A[i]);
        }
        printf("\n\n");

        // Imprimindo a matriz B
        printf("Matriz B:");
        for (int i = 0; i < SIZE*SIZE; i++) {
            if (i % SIZE == 0) printf("\n");
            printf("%d\t", B[i]);
        }
        printf("\n\n");

        // Imprimindo a matriz resultante
        printf("Matriz Resultante:");
        for (int i = 0; i < SIZE*SIZE; i++) {
            if (i % SIZE == 0) printf("\n");
            printf("%d\t", C[i]);
        }
        printf("\n\n");

        // Fazendo o desattach da memória compartilhada
        shmdt(A);
        shmdt(B);
        shmdt(C);

        // Liberando o local da memória compartilhada
        shmctl(shmid_A, IPC_RMID, NULL);
        shmctl(shmid_B, IPC_RMID, NULL);
        shmctl(shmid_C, IPC_RMID, NULL);

        return 0;
    }

    Linha de Comando p/ compilação e execução do programa:

        gcc -Wall -o ex1 ex1.c
        ./ex1

    Saida gerada:

        Matriz A:
        1       2       3
        4       5       6
        7       8       9

        Matriz B:
        2       4       6
        8       10      12
        14      16      18

        Matriz Resultante:
        3       6       9
        12      15      18
        21      24      27

    Relatório:

    O codigo comeca definindo uma funcao para calcular a soma de uma linha de duas matrizes e salvar o resultado em uma terceira matriz.
    Em seguida, iniciamos a main usando o shmget para a alocação dos espaços de memória de cada matriz em memórias compartilhadas, ou seja, para cada matriz
    tivemos uma área de memória compartilhada. Logo após, temos o Attachment dos ponteiros das matrizes (ponteiros para vetores de inteiros) nas áreas de
    memoria compartilhada usando o shmat.
    Agora, usamos um algoritmo basico para preencher as matrizes A e B de valores e, depois, entramos com o algoritmo para criar processos filhos que vão fazer o calculo
    da soma de cada linha das matrizes A e B. Esse segundo, consiste em for que cria um loop e implementa o processo filho da forma como vimos no último laboratório.
    Por ultimo, temos a exibicao das matrizes e o desattach e liberacao das areas de memoria compartilhada.

Questao 2) Faça um programa que:
    Leia uma mensagem do dia do stdin (ou arquivo)
    Crie uma memória compartilhada com a chave 8752
    Salve a mensagem na memória

    Faça um outro programa “cliente” que utilize
    a mesma chave (8752) e exiba a mensagem
d   o dia para o usuário

    Codigo fonte:

    #include <stdio.h>
    #include <stdlib.h>
    #include <string.h>
    #include <sys/ipc.h>
    #include <sys/shm.h>
    #include <sys/stat.h>
    #include <unistd.h>
    #include <sys/wait.h>

    #define SHM_KEY 8752
    #define MAX_SIZE 1024

    int main() {
        int shmid, cliente, status;
        char *data;

        // Criar memória compartilhada
        shmid = shmget(SHM_KEY, MAX_SIZE, IPC_CREAT | IPC_EXCL | S_IRUSR | S_IWUSR);
        if (shmid == -1) {
            perror("shmget");
            exit(1);
        }

        // Anexar data a memória compartilhada
        data = (char *)shmat(shmid, NULL, 0);
        if (data == (char *)(-1)) {
            perror("shmat");
            exit(1);
        }

        // Ler a mensagem do dia do stdin
        printf("Digite a mensagem do dia: ");
        if (fgets(data, MAX_SIZE, stdin) == NULL) {
            perror("fgets");
            exit(1);
        }

        printf("\n Mensagem salva na memória compartilhada.\n");

        cliente = fork();

        if (cliente != 0){

            waitpid(-1, &status, 0);
            shmdt(data);
            printf("\n Mensagem desanexada da area de memoria.\n");
            shmctl(shmid, IPC_RMID, NULL);
            printf("\n Area de memoria compartilhada identificada por schmid foi removida.\n");
            printf("\n Processos finalizados.\n");
            
        } else {
            printf("\n Processo cliente inicializado.\n");
            printf("\n Mensagem do dia: %s\n", data);
            printf("\n Processo cliente finalizado.\n");

        }
        

        return 0;
    }

    Linha de Comando p/ compilação e execução do programa:

            gcc -Wall -o ex2 ex2.c
            ./ex2

    Saida gerada:
        Digite a mensagem do dia: Sistemas Operacionais e muito legal

        Mensagem salva na memória compartilhada.

        Processo cliente inicializado.

        Mensagem do dia: Sistemas Operacionais e muito legal


        Processo cliente finalizado.

        Mensagem desanexada da area de memoria.

        Area de memoria compartilhada identificada por schmid foi removida.

        Processos finalizados.

    Relatorio:

    Criamos uma área de memoria compartilhada usando a chave 8752, em seguida, fazemos o Attachment do ponteiro para char na area de memoria
    compartilhada criada usando "data = (char *)shmat(shmid, NULL, 0);".
    Após isso, fazemos o programa ler alguma mensagem do teclado com stdin e salvamos a mensagem em data.
    Agora, criamos um processo cliente que vai acessar a mesma área de memória compartilhada e vai ler a mensagem do dia.
    Por fim, após o encerramento do processo cliente temos a liberação do espaço da memória compartilhada. 


Questao 3)  Faça um programa paralelo (com pelo menos
4 processos) para localizar uma chave em
um vetor. Crie uma memória compartilhada com dados
numéricos inteiros e desordenados e a divida
pelo número de processos Cada processo deve procurar o dado na sua área
de memória e informar a posição onde o dado foi
localizado


codigo fonte:

#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/wait.h>

#define VETOR_TAMANHO 100
#define NUM_PROCESSOS 4

// Função para procurar a chave no vetor
void procurar_chave(int *vetor, int inicio, int fim, int chave, int pid, int *p)
{
    for (int i = inicio; i < fim; i++)
    {
        if (vetor[i] == chave)
        {
            printf("Processo %d encontrou a chave %d na posição %d.\n", pid, chave, i);
            *p = i;
            exit(0); // Termina se encontrar a chave
        }
        // printf("Vetor[%d]: %d.\n", i, vetor[i]);
    }
    printf("Processo %d não encontrou a chave %d.\n", pid, chave);
    exit(0); // Termina se não encontrar a chave
}

int main()
{
    int shmid, status;
    int *vetor, *p;
    int chave = 25; // Exemplo de chave a ser procurada

    // Criar memória compartilhada
    shmid = shmget(IPC_PRIVATE, (VETOR_TAMANHO + 1) * sizeof(int), IPC_CREAT | IPC_EXCL | S_IRUSR | S_IWUSR);
    p = (int *)shmat(shmid, NULL, 0);
    vetor = p + 1;

    // Preencher o vetor com valores aleatórios
    for (int i = 0; i < VETOR_TAMANHO; i++)
    {
        vetor[i] = rand() % 100; // Valores entre 0 e 99
    }

    int tamanho_parte = VETOR_TAMANHO / NUM_PROCESSOS;

    // Criar processos e dividir o trabalho
    for (int i = 0; i < NUM_PROCESSOS; i++)
    {

        if (fork() != 0)
        {

            // waitpid(-1, &status, 0);
            printf("Processo %d criado.\n",i+1);
        }
        else
        {
            int inicio = i * tamanho_parte;
            int fim = inicio + tamanho_parte;
            procurar_chave(vetor, inicio, fim, chave, getpid(), p);
        }
    }
    while (waitpid(-1,&status,0)!=-1);
    

    printf("\nPosição %d salva no processo pai.\n", *p);

    // Desanexar e remover a memória compartilhada
    shmdt(vetor);
    shmctl(shmid, IPC_RMID, NULL);

    return 0;
}

Linha de Comando p/ compilação e execução do programa:

            gcc -Wall -o ex3 ex3.c
            ./ex3

Saida gerada:

Processo 1 criado.
Processo 2 criado.
Processo 8508 não encontrou a chave 25.
Processo 3 criado.
Processo 8509 não encontrou a chave 25.
Processo 4 criado.
Processo 8510 encontrou a chave 25 na posição 61.
Processo 8511 não encontrou a chave 25.

Posição 61 salva no processo pai.

Relatorio:

O que conseguimos fazer com esse programa é criar 4 processos que procuram por uma chave em um vetor, em paralelo e cada um em uma 
area do vetor reduzindo a complexidade do problema de n para n/4.


Questao 4) 4) Multiplicação multi-processo
Faça um programa que:
Tenha um processo pai que abre dois blocos de
memória compartilhada, m1 e m2.
cria dois processos filho (use exec), P1 e P2: estes
também fazem attach em m1 ou m2 respectivamente
Cada um dá um sleep() randômico e escreve um valor
int na área compartilhada dele, e avisa o processo pai
que um novo valor foi gerado, escrevendo tb um nr de
sequencia
O pai fica em loop verificando se houve um novo valor.
Apenas quando ambos P1 e P2 geraram um novo valor,
o pai imprime o produto dos valores gerados por P1 e
P2

Codigo fonte:

    ex4.c 
    #include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/wait.h>
#include <time.h>

#define NUM_FILHOS 2

int main(void)
{

    // Area de memoria compartilhada
    int shmid;
    char stringShmid[20];

    // variaveis
    int *p1, *p2;
    

    // Criar memória compartilhada
    shmid = shmget(IPC_PRIVATE, sizeof(int) * 2, IPC_CREAT | IPC_EXCL | S_IRUSR | S_IWUSR);
    sprintf(stringShmid, "%d", shmid);
    p1 = (int *)shmat(shmid, NULL, 0);
    p2 = p1 + 1;

    char num[20];
    for (int i = 0; i < NUM_FILHOS; i++)
    {

        if (fork() != 0)
        {

            //waitpid(-1, &status, 0);
            printf("Filho %d gerado\n",i+1);
        }
        else
        {
            sprintf(num, "%d", i);
            if (execl("./processo", "processo.c", stringShmid, num, NULL) == -1)
            {
                perror("execl failed");
                exit(EXIT_FAILURE);
            }
        }
    }

    while(*p1 == 0 || *p2==0){
                sleep(1);
                printf("Valor p1:  %d\n", *p1);
                printf("Valor p2:  %d\n", *p2);
            }

//     while(waitpid(-1,&status,0)!=-1){
//      printf("p1 = %d\n", *p1);
//      printf("p2 = %d\n", *p2);

//     } // espera todos os processos
    
    printf("produto = %d\n", *p1 * *p2);
    return 0;
}

    processo.c
    #include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/wait.h>
#include <time.h>


int main(int argc, char *argv[]){

// Receber o parametro indicando a area de memoria

// Fazer o attach de uma variavel int na area

// Fazer o sleep randomico

// Colocar o valor na variavel

// retornar para o pai

    if (argc != 3) {

        printf("Usage: %s <shmid> <i>\n", argv[0]);
        return 1;
    }

    //Convertendo os valores de string para inteiros
    int shmid = atoi(argv[1]);
    int i = atoi(argv[2]);

    //dando attach na memoria
    int *p;
    p = (int *)shmat(shmid, NULL, 0) + i;

    
    //sleep randomico
    srand(time(NULL));
    int sleepTime = rand() % 5 + 1; // numero aleatório entre [1, 10]
    printf("Processo %d ira dormir por %d segundos\n", i+1, sleepTime);
    sleep(sleepTime);
    
    

    //numero randomico
    int randomValue = rand() % 100+1; // Numeros entre 0 e 99
    *p = randomValue;
    printf("Filho %d gerou um novo numero.\n", i+1);


    return 0;

}

Linha de Comando p/ compilação e execução do programa:

            gcc -Wall -o processo processo.c
            gcc -Wall -o ex4 ex4.c
            ./ex4

Saida gerada:

    Filho 1 gerado
    Filho 2 gerado
    Processo 2 ira dormir por 4 segundos
    Processo 1 ira dormir por 4 segundos
    Valor p1:  0
    Valor p2:  0
    Valor p1:  0
    Valor p2:  0
    Valor p1:  0
    Valor p2:  0
    Valor p1:  0
    Filho 2 gerou um novo numero.
    Valor p2:  89
    Filho 1 gerou um novo numero.
    Valor p1:  89
    Valor p2:  89
    produto = 7921

Relatorio:

Criamos dois processos rodando em parelelo e o principal esperou cada um terminar antes de seguir e calcular o produto dos 
valores gerados. Percebemos que o segundo processo criado terminou primeiro e o programa esperou pela primeiro processo terminar.



